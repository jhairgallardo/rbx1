Para poder usar el nodo de pose_publisher se debe descargarlo siguiente

(Antes se debe instalar todo lo que dice en el archivo rbx1-prereq.sh de https://github.com/jhairgallardo/rbx1.git)

Luego de instalar los prerequisitos, clonar el metapaquete

cd ~/catkin_ws/src
git clone https://github.com/jhairgallardo/rbx1.git
cd rbx1
git checkout indigo-devel
cd ~/catkin_ws
catkin_make
source ~/catkin_ws/devel/setup.bash

Ese repositorio contiene el paquete pose_publisher . Tiene un archivo llamado "pose_publisher.py" que sirve para publicar los datos de
x y theta a partir del tópico de odometría del laser "scanmatch_odom" o de cualquier tópico 'odom' solo cambiando el nombre del tópico.

También contiene el archivo "move_base_send_goal.py" que es un nodo que se suscribe al topico "batery_low" y publica un punto de llegada al robot. El punto que publica es el punto de inicio para que el robot regrese en caso que la batería este baja.

Contiene el archivo geometry_to_array para mandar las velocidades del robot al arduino que se encarga del control PID.

Para ejecutar el robot simulado con un mapa por defecto, se debe ejecutar (antes darle source devel/setup.bash a todos los terminales, en catkin)

roscore

roslaunch rbx1_bringup fake_turtlebot.launch
roslaunch rbx1_nav fake_amcl.launch map:=test_map.yaml
rosrun rviz rviz -d `rpack find rbx1_nav`/amcl.rviz

Para conectar los arduino a ROS. (sus códigos estan en /home/jhair/Documents/ROS_lesson/autonomous_robot/Probando_2arduinos_ROS)
Se debe ejecutar el archivo launch

roslaunch connect_arduinos.launch 

Luego se deben ejecutar los nodos para hacer las conexiones entre el ROS en la PC y los nodos en el arduino
python geometry_to_array.py 
python pose_publisher.py 
python move_base_send_goal.py




----------------------------------------------
MANDAR POSICIÓN CALCULADA SOLO POR EL LÁSER
----------------------------------------------
Para poder ejecutar se hace lo siguiente
Primero el source

cd catkin_ws
source devel/setup.bash

Luego 
roscore

en otro terminal
cd catkin_ws/pose_publisher
roslaunch hector_mapping.launch

en otro terminal
cd catkin_ws/pose_publisher/nodes
python pose_publisher.py

Esto hace que los datos de x y theta se publique en el tópico "pose_xytheta".
Luego se debe suscribir a ese tópico con el arduino y extraer la data.

